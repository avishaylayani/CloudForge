# values.yaml
deploymentsToMonitor:
  - details-app-dev

notification:
  email: "your-email@example.com"
  slackWebhook: "https://hooks.slack.com/services/your/slack/webhook"

# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: details-app-dev
spec:
  replicas: {{ .Values.rep_set.details_app }}
  selector:
    matchLabels:
      app: details-app-dev
      version: latest
  minReadySeconds: 10 
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: details-app-dev
        version: latest
      annotations:
        date: "+%H:%M:%S %d/%m/%y"
    spec:
      containers:
        - name: details-app-dev
          env:
            - name: POSTGRES_USER
              value: {{ .Values.db_pg.POSTGRES_USER }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.secrets.POSTGRES_PASSWORD }}
            - name: SECRET_KEY
              value: {{ .Values.secrets.SECRET_KEY }}
            - name: DBHOST
              value: {{ .Values.db_pg.DBHOST }}
            - name: DBNAME
              value: {{ .Values.db_pg.DBNAME }}
          image: {{ .Values.images.details_app }}
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 5
            failureThreshold: 5
        - name: rollback-monitor
          image: bash:latest
          command: ["/bin/bash", "-c", "chmod +x /scripts/watch_rollbacks.sh && /scripts/watch_rollbacks.sh"]
          volumeMounts:
            - name: rollback-monitor-script
              mountPath: /scripts
          env:
            - name: NOTIFICATION_EMAIL
              value: "your-email@example.com"
            - name: SLACK_WEBHOOK_URL
              value: "https://hooks.slack.com/services/your/slack/webhook"
      volumes:
        - name: rollback-monitor-script
          configMap:
            name: rollback-monitor-scripts

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-dev
spec:
  replicas: {{ .Values.rep_set.postgres }}
  selector:
    matchLabels:
      app: postgres-dev
      version: latest
  template:
    metadata:
      labels:
        app: postgres-dev
        version: latest
    spec:
      hostname: postgres-dev-container
      volumes:
      - name: postgres-dev-storage
        persistentVolumeClaim:
          claimName: postgres-dev-pvc
      containers:
        - name: postgres-dev
          env:
            - name: POSTGRES_DB
              value: {{ .Values.db_pg.POSTGRES_DB }}
            - name: POSTGRES_USER
              value: {{ .Values.db_pg.POSTGRES_USER }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.secrets.POSTGRES_PASSWORD }}  # Use decrypted secret
          image: {{ .Values.images.postgres }}

          ports:
            - containerPort: 5432 # This is the internal container port
          volumeMounts:
            - name: postgres-dev-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"

# rollback-monitor.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rollback-monitor-scripts
  namespace: {{ .Release.Namespace }}
data:
  watch_rollbacks.sh: |
    #!/bin/bash
    while true; do
      kubectl get events --field-selector reason=RolloutUndo \
        --namespace {{ .Release.Namespace }} \
        --watch-only | while read line; do

        DEPLOYMENT=$(echo "$line" | grep -oP '{{ .Values.deploymentsToMonitor | join "|" }}')
        if [ -n "$DEPLOYMENT" ]; then
          MESSAGE="Rollback detected for $DEPLOYMENT. Check the deployment immediately."

          # Send Email Notification
          echo "$MESSAGE" | mail -s "K3s Rollback Notification" "{{ .Values.notification.email }}"

          # Send Slack Notification
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"'"$MESSAGE"'"}' \
          {{ .Values.notification.slackWebhook }}
        fi
      done
    done




# Step 4: Deploy Using Helm
# 	1.	Package your Helm chart:
#   helm package <chart-directory>


# 	2.	Deploy or upgrade your application with Helm:
#   helm upgrade --install details-app ./details-app-helm-chart --namespace default

# 	3.	Verify the deployment:
#   kubectl get pods -n default

#   4.	Test rollback notifications by simulating a failed deployment:
# kubectl set image deployment/details-app-dev details-app-dev=invalid-image --record
# kubectl rollout status deployment/details-app-dev

# Summary
# 	•	The ConfigMap (rollback-monitor-scripts) is added to the Helm chart.
# 	•	Sidecar containers are included in both details-app-dev and postgres-dev deployments to monitor rollback events.
# 	•	Notifications are configured using Helm values for email and Slack.